/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
    string serialize(TreeNode *root) {
        // write your code here
    string result("{}");
    if(root == NULL){
        return result;
    }
    deque<TreeNode *> queue;
    TreeNode * curr = NULL;
    queue.push_back(root);
    stringstream ss;
    ss << "{";
    bool first = 1;
    while(!queue.empty()){
        int size = queue.size();
        for(int i = 0; i < size; ++ i){
            curr = queue.front();
            queue.pop_front();
            if(curr != NULL){
                if (first){
                    ss << to_string(curr -> val);
                    first = 0;
                }else{
                    ss <<"," << to_string(curr -> val) ;
                }
                queue.push_back(curr -> left);
                queue.push_back(curr -> right);
            }else{
                ss << ",#";
            }
        }
    }
    ss <<"}";
    return ss.str();
    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    TreeNode *deserialize(string data) {
        // write your code here
    if(data=="{}"){
        return NULL;
    }
    vector<string> val = split(data.substr(1,data.size()-2));
    deque<TreeNode *> queue;
    TreeNode * root =  new TreeNode(atoi(val[0].c_str()));
    bool isLeft = 1;
    queue.push_back(root);
    for(int i = 1; i < val.size(); ++ i){
        if(val[i] != "#"){
            TreeNode * top = new TreeNode(atoi(val[i].c_str()));
            if(isLeft){
                queue.front() -> left = top;
            }else{
                queue.front() -> right = top;
            }
            queue.push_back(top);
        }
        if(!isLeft){
            queue.pop_front();
        }
        isLeft = !isLeft;
    }
    return root;
    }
    
    vector<string> split(string data){
    vector<string> result;
    int len = 0; 
    for(int pos = 0; pos < data.size(); ++pos){
        if(data[pos] == ','){
            result.push_back(data.substr(pos - len, len));
            len = 0;
        }else{
            ++ len;
        }
    }

    return result;
}
};
