class Solution {
public:
    /**
     * @param nums a mountain sequence which increase firstly and then decrease
     * @return then mountain top
     */
    int mountainSequence(vector<int>& nums) {
        // Write your code here
        int begin = 0, end = nums.size() - 1, mid = 0;
        while(begin + 1 < end){
            mid = begin + (end - begin) / 2;
            if(mid == 0){
                if (nums[mid] > nums[mid] + 1){
                    return nums[mid];
                }
                else{
                    begin = mid;
                }
            }
            else{
                if(mid == nums.size() - 1){
                    if(nums[mid] < nums[mid] - 1){
                        return nums[mid];
                    }
                    else{
                        end = mid;
                    }
                }
                else{
                    if(nums[mid] > nums[mid - 1 ] && nums[mid] < nums[mid + 1]){
                        begin = mid;
                    }
                    else{
                        if(nums[mid] < nums[mid - 1] && nums[mid] > nums[mid + 1]){
                            end = mid;
                        }
                        else{
                            return nums[mid];
                        }
                    }
                }
            }
        }
        return max(nums[begin],nums[end]);
    }
};