class Solution {
public:
    /**
     * @param matrix, a list of lists of integers
     * @param target, an integer
     * @return a boolean, indicate whether matrix contains target
     */
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        // write your code here
        if(matrix.size() == 0 || matrix[0].size() == 0){
            return false;
        }
        int m = matrix.size(), n = matrix[0].size();
        int col_begin = 0, col_end = m-1, col_mid = 0;
        while(col_begin + 1 < col_end){
            col_mid = col_begin + (col_end - col_begin) / 2;
            if (matrix[col_mid][0] > target){
                col_end = col_mid;
            }
            else{
                if (matrix[col_mid][0] < target){
                    col_begin = col_mid;
                }
                else{
                    return true;
                }
            }
        }
        int col = 0;
        if(matrix[col_end][0] <= target){
            col = col_end;
        }
        else{
            if(matrix[col_begin][0] <= target){
                col = col_begin;
            }
            else {
                return false;
            }
        }
        
        int row_b = 0, row_e = n-1, row_m = 0;
        while(row_b + 1 < row_e){
            row_m = row_b + (row_e - row_b) / 2;
            if(matrix[col][row_m] == target){
                return true;
            }
            else{
                if(matrix[col][row_m] > target){
                    row_e = row_m;
                }
                else{
                    row_b = row_m;
                }
            }
        }
        
        if(matrix[col][row_b] == target){
            return true;
        }
        else{ if(matrix[col][row_e] == target){
            return true;
        }else{
            return false;
        }
        }
    }
};
