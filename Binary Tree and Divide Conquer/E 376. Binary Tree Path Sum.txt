/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root the root of binary tree
     * @param target an integer
     * @return all valid paths
     */
    vector<vector<int>> result;
    vector<vector<int>> binaryTreePathSum(TreeNode *root, int target) {
        // Write your code here
        if(root == NULL){
            return result;
        }
        vector<int> path; 
        dfsPath(path, root, target);
        return result;
    }
    
    void dfsPath(vector<int> path, TreeNode *root, int target){
        if(root == NULL){
            return;
        }
        path.push_back(root->val);
        if(root -> left == NULL && root -> right == NULL){
            if(root -> val == target){
                result.push_back(path);
            }
                return;
            }
        dfsPath(path, root -> left, target - root -> val);
        dfsPath(path, root -> right, target - root -> val);
        return; 
    }
};