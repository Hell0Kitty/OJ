/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root the root of the binary tree
     * @return all root-to-leaf paths
     */
    vector<string> result;
    vector<string> binaryTreePaths(TreeNode* root) {
        // Write your code here
        string path;
        dfsPath(root, path);
        return result;
    }
    
    void dfsPath(TreeNode *root, string path){
        if(root == NULL){
            return;
        }
        if(path.empty()){
            path += to_string(root -> val);
        }else{
            path = path + "->" + to_string(root -> val);
        }
        
        if(root -> left ==NULL && root -> right == NULL){
            result.push_back(path);
            return;
        }
        dfsPath(root -> left, path);
        dfsPath(root -> right, path);
    }
};